import { useState, useRef, useEffect } from "react";
import { CauliLogo } from "./CauliLogo";
import { Input } from "./ui/input";
import { Button } from "./ui/button";
import { ArrowLeft, Send, Smile, MoreVertical } from "lucide-react";

interface Message {
  id: string;
  text: string;
  sender: "user" | "cauli";
  timestamp: Date;
}

interface ChatScreenProps {
  onBack: () => void;
}

export function ChatScreen({ onBack }: ChatScreenProps) {
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      text: "Xin ch√†o! M√¨nh l√† Cauli, tr·ª£ l√Ω AI c·ªßa b·∫°n. R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n! üòä\n\nH√¥m nay b·∫°n c·∫£m th·∫•y nh∆∞ th·∫ø n√†o? C√≥ ƒëi·ªÅu g√¨ b·∫°n mu·ªën chia s·∫ª v·ªõi m√¨nh kh√¥ng?",
      sender: "cauli",
      timestamp: new Date(Date.now() - 60000),
    },
  ]);
  const [inputText, setInputText] = useState("");
  const [isTyping, setIsTyping] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const cauliResponses = [
    "M√¨nh hi·ªÉu c·∫£m gi√°c c·ªßa b·∫°n. ƒêi·ªÅu ƒë√≥ nghe c√≥ v·∫ª th·∫≠t s·ª± quan tr·ªçng v·ªõi b·∫°n. B·∫°n c√≥ mu·ªën chia s·∫ª th√™m v·ªÅ ƒëi·ªÅu n√†y kh√¥ng?",
    "C·∫£m ∆°n b·∫°n ƒë√£ tin t∆∞·ªüng v√† chia s·∫ª v·ªõi m√¨nh. M√¨nh lu√¥n ·ªü ƒë√¢y ƒë·ªÉ l·∫Øng nghe b·∫°n. üíô",
    "M√¨nh c·∫£m th·∫•y b·∫°n ƒë√£ r·∫•t d≈©ng c·∫£m khi chia s·∫ª ƒëi·ªÅu n√†y. B·∫°n nghƒ© g√¨ v·ªÅ c√°ch ƒë·ªÉ c·∫£i thi·ªán t√¨nh h√¨nh n√†y?",
    "ƒê√≥ l√† m·ªôt c·∫£m x√∫c ho√†n to√†n b√¨nh th∆∞·ªùng. M·ªçi ng∆∞·ªùi ƒë·ªÅu tr·∫£i qua nh·ªØng l√∫c nh∆∞ v·∫≠y. B·∫°n c√≥ mu·ªën n√≥i th√™m kh√¥ng?",
    "M√¨nh r·∫•t tr√¢n tr·ªçng s·ª± tin t∆∞·ªüng c·ªßa b·∫°n. H√£y nh·ªõ r·∫±ng m√¨nh lu√¥n s·∫µn s√†ng l·∫Øng nghe v√† h·ªó tr·ª£ b·∫°n nh√©! üåü",
    "Nghe b·∫°n n√≥i nh∆∞ v·∫≠y, m√¨nh c·∫£m th·∫•y b·∫°n c√≥ m·ªôt g√≥c nh√¨n r·∫•t t√≠ch c·ª±c. ƒêi·ªÅu ƒë√≥ th·∫≠t tuy·ªát v·ªùi!",
    "C√≥ v·∫ª nh∆∞ ƒë√¢y l√† m·ªôt ch·ªß ƒë·ªÅ quan tr·ªçng v·ªõi b·∫°n. M√¨nh mu·ªën hi·ªÉu r√µ h∆°n v·ªÅ c·∫£m x√∫c c·ªßa b·∫°n. B·∫°n c√≥ th·ªÉ m√¥ t·∫£ chi ti·∫øt h∆°n kh√¥ng?",
  ];

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages, isTyping]);

  const handleSendMessage = () => {
    if (!inputText.trim()) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputText,
      sender: "user",
      timestamp: new Date(),
    };

    setMessages((prev) => [...prev, userMessage]);
    setInputText("");
    setIsTyping(true);

    // Simulate Cauli's thinking and response
    setTimeout(() => {
      setIsTyping(false);
      const cauliResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: cauliResponses[Math.floor(Math.random() * cauliResponses.length)],
        sender: "cauli",
        timestamp: new Date(),
      };
      setMessages((prev) => [...prev, cauliResponse]);
    }, 1500 + Math.random() * 1000);
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === "Enter" && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  return (
    <div className="min-h-screen bg-gradient-to-b from-gray-50 to-white flex flex-col pb-24">
      {/* Header */}
      <div className="bg-white/95 backdrop-blur-lg border-b border-gray-200/50 shadow-sm">
        <div className="flex items-center justify-between p-4 pt-12">
          <div className="flex items-center space-x-3">
            <button 
              onClick={onBack} 
              className="p-2 rounded-full hover:bg-gray-100 transition-colors"
            >
              <ArrowLeft className="w-6 h-6 text-gray-600" />
            </button>
            <div className="flex items-center space-x-3">
              <div className="relative">
                <CauliLogo size="small" />
                <div className="absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 rounded-full border-2 border-white"></div>
              </div>
              <div>
                <h1 className="font-semibold text-gray-800">Cauli</h1>
                <p className="text-sm text-green-600">ƒêang ho·∫°t ƒë·ªông</p>
              </div>
            </div>
          </div>
          <button className="p-2 rounded-full hover:bg-gray-100 transition-colors">
            <MoreVertical className="w-5 h-5 text-gray-600" />
          </button>
        </div>
      </div>

      {/* Messages */}
      <div className="flex-1 p-4 space-y-4 overflow-y-auto">
        {messages.map((message) => (
          <div
            key={message.id}
            className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"}`}
          >
            <div className={`max-w-[80%] ${message.sender === "user" ? "order-2" : "order-1"}`}>
              {message.sender === "cauli" && (
                <div className="flex items-end space-x-2 mb-2">
                  <CauliLogo size="small" />
                  <span className="text-xs text-gray-500 font-medium">Cauli</span>
                </div>
              )}
              <div
                className={`p-4 rounded-2xl shadow-sm ${
                  message.sender === "user"
                    ? "bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-br-md"
                    : "bg-white border border-gray-200 text-gray-800 rounded-bl-md"
                }`}
              >
                <p className="text-sm leading-relaxed whitespace-pre-line">
                  {message.text}
                </p>
                <p
                  className={`text-xs mt-2 ${
                    message.sender === "user" ? "text-green-100" : "text-gray-500"
                  }`}
                >
                  {message.timestamp.toLocaleTimeString("vi-VN", {
                    hour: "2-digit",
                    minute: "2-digit",
                  })}
                </p>
              </div>
            </div>
          </div>
        ))}

        {/* Typing indicator */}
        {isTyping && (
          <div className="flex justify-start">
            <div className="max-w-[80%]">
              <div className="flex items-end space-x-2 mb-2">
                <CauliLogo size="small" />
                <span className="text-xs text-gray-500 font-medium">Cauli</span>
              </div>
              <div className="bg-white border border-gray-200 p-4 rounded-2xl rounded-bl-md shadow-sm">
                <div className="flex space-x-2">
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                  <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                </div>
              </div>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>

      {/* Input area */}
      <div className="bg-white/95 backdrop-blur-lg border-t border-gray-200/50 p-4 shadow-lg">
        <div className="flex items-end space-x-3 max-w-sm mx-auto">
          <button className="p-3 text-gray-500 hover:text-gray-700 hover:bg-gray-100 rounded-full transition-colors">
            <Smile className="w-5 h-5" />
          </button>
          <div className="flex-1 relative">
            <Input
              value={inputText}
              onChange={(e) => setInputText(e.target.value)}
              onKeyPress={handleKeyPress}
              placeholder="Nh·∫≠p tin nh·∫Øn..."
              className="w-full min-h-[48px] bg-gray-100 border-0 rounded-3xl px-4 py-3 pr-14 text-gray-800 placeholder:text-gray-500 focus:bg-white focus:ring-2 focus:ring-green-500 resize-none"
              style={{ maxHeight: "120px" }}
            />
            <Button
              onClick={handleSendMessage}
              disabled={!inputText.trim() || isTyping}
              size="sm"
              className="absolute right-2 top-1/2 transform -translate-y-1/2 bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 disabled:opacity-50 rounded-full w-10 h-10 p-0 shadow-lg"
            >
              <Send className="w-4 h-4" />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}